{"version":3,"sources":["api.ts","utils/DateHelper.ts","redux/actions/categories.ts","components/Select/style.module.scss","notify/components/Notify/style.module.scss","redux/actions/transactions.ts","redux/actions/widgets.ts","redux/actions/calendar.ts","components/ModalContainer/style.module.scss","components/ButtonText/style.module.scss","components/ActivityIndicator/style.module.scss","components/ButtonText/index.js","components/ButtonText/ButtonText.tsx","components/Select/Select.tsx","components/Select/index.js","components/Button/index.js","components/Button/Button.tsx","components/ModalContainer/index.js","components/ModalContainer/ModalContainer.tsx","notify/components/Notify/index.js","notify/components/Notify/Notify.tsx","components/NotifyContainer/hooks/useNotify.ts","components/NotifyContainer/index.js","components/NotifyContainer/NotifyContainer.tsx","components/ActivityIndicator/index.js","components/ActivityIndicator/ActivityIndicator.tsx","hooks/useTypedSelectors.ts","redux/actions/user.ts","utils/Network.ts","components/Button/style.module.scss","components/NotifyContainer/style.module.scss","style.module.scss","redux/actions/notifications.ts","redux/reducers/transactions.ts","redux/reducers/widgets.ts","redux/reducers/categories.ts","redux/reducers/notifications.ts","redux/reducers/calendar.ts","redux/reducers/user.ts","redux/reducers/index.ts","redux/store.ts","App.tsx","index.tsx"],"names":["api","transactions","url","global","categories","transactionsByCategories","widget","colors","user","auth","reg","getInfo","refresh_token","DateHelper","month","Date","getDate","date","getDay","monthRuNames","monthEngNames","periodTypes","dayRuNames","name","abbreviation","dayEngNames","getPrevDate","selectedOption","setDate","setMonth","getMonth","setFullYear","getFullYear","getNextDate","Types","SET_ITEMS","SET_ITEMS_TRANSACTIONS","LOADING","ERROR","CategoriesActions","fetchCategories","dispatch","_","a","fetch","get","then","data","setCategories","result","fetchTransactionsByCategories","getState","calendar","nowDateStamp","prevDateStamp","params","start_date","end_date","setTransactionsByCategories","catch","error","batch","setLoading","NotificationsActions","addNotify","type","text","addCategory","category_type","post","is_income","items","payload","isLoading","module","exports","SET_GLOBAL_ITEMS","TransactionsActions","fetchTransactions","offset","limit","setTransactions","addTransaction","amount","category","transaction_date","transaction_timestamp","category_id","id","find","item","CategoryActions","fetchGlobalTransactions","updateTransaction","put","forEach","transaction","index","deleteTransaction","delete","filter","setGlobalTransactions","SET_COLORS","LOADED","WidgetsActions","fetchWidgets","setWidgets","console","log","setLoaded","fetchWidgetColors","axios","setWidgetColor","addWidgetAction","fields","period","value","color_id","color","expire_at","is_more","isMore","deleteWidgetAction","widgets","isLoaded","SET_DAY","SET_MONTH","SET_YEAR","SET_SELECTED_OPTION","setCalendarDayAction","day","setCalendarMonthAction","setCalendarYearAction","setSelectedOptionAction","option","ButtonText","children","onClick","className","styles","btn","btn_plus","SelectOptionBlock","options","onClose","optionsRef","React","useRef","onCloseHandler","useCallback","useEffect","document","body","addEventListener","removeEventListener","select_options","ref","map","select_option","Select","onChange","useState","setSelectedOption","openOptions","setOpenOptions","select","select_label","prev","cn","select_svg","open","width","height","viewBox","fill","xmlns","d","Button","button","ModalContainer","e","target","includes","escHandler","key","modal","modal_close","Notify","notify","notify__success","notify__warning","notify__error","notify_close","notify_text","useNotify","useDispatch","notificationItems","useTypedSelector","notifications","deleteNotify","NotifyContainer","ActivityIndicator","indicator","useSelector","SET_USERNAME","userActions","authAction","regAction","fetchInfoAction","setUsername","username","create","responseType","withCredentials","timeout","headers","Accept","interceptors","request","use","config","Authorization","reactLocalStorage","Promise","reject","response","originalRequest","status","set","access_token","setNotifyAction","splice","initState","globalItems","reducer","state","action","produce","draft","itemsTransactions","nowDate","getDateWithoutTime","selectedDay","selectedMonth","selectedYear","rootReducer","combineReducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","middleware","think","withExtraArgument","store","createStore","applyMiddleware","Home","lazy","Auth","App","container","path","Suspense","fallback","isReg","exact","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.fd5eef2c.chunk.js","sourcesContent":["const api = {\r\n    transactions: {\r\n        url: \"/api/transactions/\",\r\n        global: \"/api/transactions/global/\",\r\n    },\r\n    categories: {\r\n        url: \"/api/categories/\",\r\n        transactionsByCategories: \"/api/categories/transactions_by_categories/\",\r\n    },\r\n    widget: {\r\n        url: \"/api/widgets/\",\r\n        colors: \"colors/\",\r\n    },\r\n    user: {\r\n        url: \"/user/\",\r\n        auth: \"auth\",\r\n        reg: \"reg\",\r\n        getInfo: \"info\",\r\n        refresh_token: 'refresh'\r\n    },\r\n};\r\n\r\nexport default api;","export default class DateHelper {\r\n    static monthRuNames = [\r\n        \"Январь\",\r\n        \"Февраль\",\r\n        \"Март\",\r\n        \"Апрель\",\r\n        \"Май\",\r\n        \"Июнь\",\r\n        \"Июль\",\r\n        \"Август\",\r\n        \"Сентябрь\",\r\n        \"Октябрь\",\r\n        \"Ноябрь\",\r\n        \"Декабрь\",\r\n    ];\r\n\r\n    static monthEngNames = [\r\n        \"January\",\r\n        \"February\",\r\n        \"March\",\r\n        \"April\",\r\n        \"May\",\r\n        \"June\",\r\n        \"July\",\r\n        \"August\",\r\n        \"September\",\r\n        \"October\",\r\n        \"November\",\r\n        \"December\",\r\n    ];\r\n\r\n    static periodTypes = [\"День\", \"Неделя\", \"Месяц\", \"Год\"];\r\n\r\n    static dayRuNames = [\r\n        {\r\n            name: \"Понедельник\",\r\n            abbreviation: \"Пн\",\r\n        },\r\n        {\r\n            name: \"Вторник\",\r\n            abbreviation: \"Вт\",\r\n        },\r\n        {\r\n            name: \"Среда\",\r\n            abbreviation: \"Ср\",\r\n        },\r\n        {\r\n            name: \"Четверг\",\r\n            abbreviation: \"Чт\",\r\n        },\r\n        {\r\n            name: \"Пятница\",\r\n            abbreviation: \"Пт\",\r\n        },\r\n        {\r\n            name: \"Суббота\",\r\n            abbreviation: \"Сб\",\r\n        },\r\n        {\r\n            name: \"Воскресенье\",\r\n            abbreviation: \"Вс\",\r\n        },\r\n    ];\r\n\r\n    static dayEngNames = [\r\n        {\r\n            name: \"Monday\",\r\n            abbreviation: \"Mon\",\r\n        },\r\n        {\r\n            name: \"Tuesday\",\r\n            abbreviation: \"Tue\",\r\n        },\r\n        {\r\n            name: \"Wednesday\",\r\n            abbreviation: \"Wed\",\r\n        },\r\n        {\r\n            name: \"Thursday\",\r\n            abbreviation: \"Thu\",\r\n        },\r\n        {\r\n            name: \"Friday\",\r\n            abbreviation: \"Fri\",\r\n        },\r\n        {\r\n            name: \"Saturday\",\r\n            abbreviation: \"Sat\",\r\n        },\r\n        {\r\n            name: \"Sunday\",\r\n            abbreviation: \"Sun\",\r\n        },\r\n    ];\r\n    static getCountDaysInMonth(month: number) {\r\n        return 32 - new Date(2021, month - 1, 32).getDate();\r\n    }\r\n\r\n    static getDayOnWeek(date: Date) {\r\n        return date.getDay();\r\n    }\r\n\r\n    static getPrevDate = (date: Date, selectedOption: string) => {\r\n        switch (selectedOption) {\r\n            case \"День\":\r\n                return date.setDate(date.getDate() - 1);\r\n            case \"Неделя\":\r\n                return date.setDate(date.getDate() - 7);\r\n            case \"Месяц\":\r\n                return date.setMonth(date.getMonth() - 1);\r\n            case \"Год\":\r\n            default:\r\n                return date.setFullYear(date.getFullYear() - 1);\r\n        }\r\n    };\r\n    static getNextDate = (date: Date, selectedOption: string) => {\r\n        switch (selectedOption) {\r\n            case \"День\":\r\n                return date.setDate(date.getDate() + 1);\r\n            case \"Неделя\":\r\n                return date.setDate(date.getDate() + 7);\r\n            case \"Месяц\":\r\n                return date.setMonth(date.getMonth() + 1);\r\n            case \"Год\":\r\n            default:\r\n                return date.setFullYear(date.getFullYear() + 1);\r\n        }\r\n    };\r\n}\r\n","import { batch } from \"react-redux\";\r\nimport { CategoryFormValues } from \"../../pages/Home/hooks/useCategories\";\r\nimport { fetch } from \"../../utils/Network\";\r\nimport { TAction } from \"../store\";\r\nimport { NotificationsActions } from \"./notifications\";\r\n\r\nexport const Types = {\r\n    SET_ITEMS: \"CATEGORIES@SET:ITEMS\",\r\n    SET_ITEMS_TRANSACTIONS: \"CATEGORIES@SET:ITEMS_TRANSACTIONS\",\r\n    LOADING: \"CATEGORIES@LOADING\",\r\n    ERROR: \"CATEGORIES@LOADING:ERROR\",\r\n};\r\n\r\nexport type TCategory = {\r\n    id: number;\r\n    name: string;\r\n    is_income: boolean;\r\n};\r\n\r\nexport interface ITransactionsByCategory extends TCategory {\r\n    transactions_sum: number;\r\n}\r\n\r\ntype TCategoryAction = {\r\n    type: typeof Types.SET_ITEMS;\r\n    payload: TCategory[];\r\n};\r\n\r\ntype TTransactionsByCategoryAction = {\r\n    type: typeof Types.SET_ITEMS_TRANSACTIONS;\r\n    payload: ITransactionsByCategory[];\r\n};\r\n\r\ntype TLoadingAction = {\r\n    type: typeof Types.LOADING;\r\n    payload: boolean;\r\n};\r\n\r\nexport type CategoryActions =\r\n    | TCategoryAction\r\n    | TTransactionsByCategoryAction\r\n    | TLoadingAction;\r\n\r\ntype CategoryActionsType = {\r\n    fetchCategories: () => TAction<Promise<void>>;\r\n    fetchTransactionsByCategories: () => TAction<Promise<void>>;\r\n    addCategory: (data: CategoryFormValues) => TAction<Promise<void>>;\r\n    setTransactionsByCategories: (\r\n        items: ITransactionsByCategory[]\r\n    ) => TTransactionsByCategoryAction;\r\n    setCategories: (items: TCategory[]) => TCategoryAction;\r\n    setLoading: (isLoading: boolean) => TLoadingAction;\r\n};\r\n\r\nconst CategoriesActions: CategoryActionsType = {\r\n    fetchCategories() {\r\n        return async (dispatch, _, { api }) => {\r\n            fetch\r\n                .get(api.categories.url)\r\n                .then(({ data }) => dispatch(this.setCategories(data.result)));\r\n        };\r\n    },\r\n    fetchTransactionsByCategories() {\r\n        return async (dispatch, getState, { api }) => {\r\n            const { nowDateStamp, prevDateStamp } = getState().calendar;\r\n            fetch\r\n                .get(api.categories.transactionsByCategories, {\r\n                    params: {\r\n                        start_date: prevDateStamp,\r\n                        end_date: nowDateStamp,\r\n                    },\r\n                })\r\n                .then(({ data }) => {\r\n                    dispatch(this.setTransactionsByCategories(data.result));\r\n                })\r\n                .catch((error) => {\r\n                    batch(() => {\r\n                        dispatch(this.setLoading(true));\r\n                        dispatch(\r\n                            NotificationsActions.addNotify({\r\n                                type: \"error\",\r\n                                text: \"Не удалось загрузить категории\",\r\n                            })\r\n                        );\r\n                    });\r\n                });\r\n        };\r\n    },\r\n    addCategory({ name, category_type }) {\r\n        return async (dispatch, _, { api }) => {\r\n            fetch\r\n                .post(api.categories.url, {\r\n                    name,\r\n                    is_income: category_type,\r\n                })\r\n                .then(() => dispatch(this.fetchCategories()))\r\n                .catch((error) => {\r\n                    dispatch(\r\n                        NotificationsActions.addNotify({\r\n                            type: \"error\",\r\n                            text: \"Не удалось добавить категорию\",\r\n                        })\r\n                    );\r\n                });\r\n        };\r\n    },\r\n    setTransactionsByCategories(items) {\r\n        return {\r\n            type: Types.SET_ITEMS_TRANSACTIONS,\r\n            payload: items,\r\n        };\r\n    },\r\n    setCategories(items) {\r\n        return {\r\n            type: Types.SET_ITEMS,\r\n            payload: items,\r\n        };\r\n    },\r\n    setLoading(isLoading) {\r\n        return {\r\n            type: Types.LOADING,\r\n            payload: isLoading,\r\n        };\r\n    },\r\n};\r\n\r\nexport default CategoriesActions;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"select\":\"style_select__24nQI\",\"select_svg\":\"style_select_svg__3aISt\",\"open\":\"style_open__13ohM\",\"select_option\":\"style_select_option__37Kih\",\"select_label\":\"style_select_label__1h4WW\",\"select_options\":\"style_select_options__fGj3a\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"notify\":\"style_notify__3qZwk\",\"notify_close\":\"style_notify_close__3froJ\",\"notify_text\":\"style_notify_text__3TYFB\",\"notify__success\":\"style_notify__success__3nEf5\",\"notify__warning\":\"style_notify__warning__2p9ox\",\"notify__error\":\"style_notify__error__11lAZ\"};","import { batch } from \"react-redux\";\r\nimport CategoryActions from \"./categories\";\r\nimport { TCategory } from \"./categories\";\r\nimport { fetch } from \"../../utils/Network\";\r\nimport { NotificationsActions } from \"./notifications\";\r\nimport { TAction } from \"../store\";\r\nimport { TransactionFormValues } from \"../../pages/Home/hooks/useTransactions\";\r\n\r\nexport const Types = {\r\n    SET_ITEMS: \"TRANSACTIONS@SET:ITEMS\",\r\n    SET_GLOBAL_ITEMS: \"TRANSACTIONS@SET:GLOBAL_ITEMS\",\r\n    LOADING: \"TRANSACTIONS@LOADING:START\",\r\n    ERROR: \"TRANSACTIONS@LOADING:ERROR\",\r\n};\r\n\r\nexport type TTransaction = {\r\n    count: number;\r\n    next: string;\r\n    previous: string;\r\n    result: TTransactionItem[];\r\n};\r\n\r\nexport type TTransactionItem = {\r\n    id: number;\r\n    category: TCategory;\r\n    transaction_date: number;\r\n    amount: number;\r\n};\r\n\r\nexport type TGlobalTransactionItem = {\r\n    name: string;\r\n    amount: number;\r\n};\r\n\r\ntype TTransactionItemAction = {\r\n    type: typeof Types.SET_ITEMS;\r\n    payload: TTransactionItem[];\r\n};\r\n\r\ntype TGlobalTransactionItemAction = {\r\n    type: typeof Types.SET_GLOBAL_ITEMS;\r\n    payload: TGlobalTransactionItem[];\r\n};\r\n\r\ntype TLoadingAction = {\r\n    type: typeof Types.LOADING;\r\n    payload: boolean;\r\n};\r\n\r\nexport type TransactionActions =\r\n    | TTransactionItemAction\r\n    | TGlobalTransactionItemAction\r\n    | TLoadingAction;\r\n\r\ntype TransactionsActionsType = {\r\n    fetchTransactions: (\r\n        offset?: number,\r\n        limit?: number\r\n    ) => TAction<Promise<void>>;\r\n    fetchGlobalTransactions: () => TAction<Promise<void>>;\r\n    addTransaction: (data: TransactionFormValues) => TAction<Promise<void>>;\r\n    updateTransaction: (data: TransactionFormValues) => TAction<Promise<void>>;\r\n    deleteTransaction: (id: number) => TAction<Promise<void>>;\r\n    setTransactions: (items: TTransactionItem[]) => TTransactionItemAction;\r\n    setGlobalTransactions: (\r\n        items: TGlobalTransactionItem[]\r\n    ) => TGlobalTransactionItemAction;\r\n    setLoading: (isLoading: boolean) => TLoadingAction;\r\n};\r\n\r\nexport const TransactionsActions: TransactionsActionsType = {\r\n    fetchTransactions(offset = 1, limit = 20) {\r\n        return async (dispatch, getState, { api }) => {\r\n            const { nowDateStamp, prevDateStamp } = getState().calendar;\r\n            fetch\r\n                .get<TTransaction>(api.transactions.url, {\r\n                    params: {\r\n                        start_date: prevDateStamp,\r\n                        end_date: nowDateStamp,\r\n                        offset,\r\n                        limit,\r\n                    },\r\n                })\r\n                .then(({ data }) => {\r\n                    dispatch(this.setTransactions(data.result));\r\n                })\r\n                .catch((error) => {\r\n                    batch(() => {\r\n                        dispatch(this.setLoading(true));\r\n                        dispatch(\r\n                            NotificationsActions.addNotify({\r\n                                type: \"error\",\r\n                                text: \"Не удалось загрузить транзакции\",\r\n                            })\r\n                        );\r\n                    });\r\n                });\r\n        };\r\n    },\r\n    addTransaction({ amount, date, category }) {\r\n        return async (dispatch, getState, { api }) => {\r\n            const transaction_date = new Date(date);\r\n            const transaction_timestamp = +transaction_date;\r\n            const { transactions, categories } = getState();\r\n\r\n            fetch\r\n                .post(api.transactions.url, {\r\n                    amount,\r\n                    transaction_date: transaction_timestamp,\r\n                    category_id: category.id,\r\n                })\r\n                .then(({ data }) => {\r\n                    batch(() => {\r\n                        dispatch(\r\n                            this.setTransactions([\r\n                                {\r\n                                    id: data.id,\r\n                                    transaction_date:\r\n                                        transaction_timestamp / 1000,\r\n                                    category:\r\n                                        categories.items.find(\r\n                                            (item: TCategory) =>\r\n                                                category.id === item.id\r\n                                        ) || categories.items[0],\r\n                                    amount,\r\n                                },\r\n                                ...transactions.items,\r\n                            ])\r\n                        );\r\n                        dispatch(\r\n                            CategoryActions.fetchTransactionsByCategories()\r\n                        );\r\n                        dispatch(this.fetchGlobalTransactions());\r\n                    });\r\n                })\r\n                .catch((error) => {\r\n                    dispatch(\r\n                        NotificationsActions.addNotify({\r\n                            type: \"error\",\r\n                            text: \"Не удалось добавить транзакцию\",\r\n                        })\r\n                    );\r\n                });\r\n        };\r\n    },\r\n    updateTransaction({ id, amount, date, category }) {\r\n        return async (dispatch, getState, { api }) => {\r\n            const transaction_date = new Date(date);\r\n            const { transactions } = getState();\r\n            fetch\r\n                .put(`${api.transactions.url}${id}/`, {\r\n                    amount,\r\n                    transaction_date: +transaction_date,\r\n                    category_id: category.id,\r\n                })\r\n                .then(({ data }) => {\r\n                    const items = [...transactions.items];\r\n                    transactions.items.forEach(\r\n                        (transaction: TTransactionItem, index: number) => {\r\n                            if (transaction.id === id) {\r\n                                items[index] = data.result;\r\n                            }\r\n                        }\r\n                    );\r\n                    batch(() => {\r\n                        dispatch(this.setTransactions(items));\r\n                        dispatch(\r\n                            CategoryActions.fetchTransactionsByCategories()\r\n                        );\r\n                        dispatch(this.fetchGlobalTransactions());\r\n                    });\r\n                });\r\n        };\r\n    },\r\n    deleteTransaction(id) {\r\n        return async (dispatch, getState, { api }) => {\r\n            const { transactions } = getState();\r\n            fetch\r\n                .delete(`${api.transactions.url}${id}/`)\r\n                .then(() => {\r\n                    batch(() => {\r\n                        dispatch(\r\n                            this.setTransactions(\r\n                                transactions.items.filter(\r\n                                    (item) => item.id !== id\r\n                                )\r\n                            )\r\n                        );\r\n                        dispatch(\r\n                            CategoryActions.fetchTransactionsByCategories()\r\n                        );\r\n                        dispatch(this.fetchGlobalTransactions());\r\n                    });\r\n                })\r\n                .catch((error) => {\r\n                    dispatch(\r\n                        NotificationsActions.addNotify({\r\n                            type: \"error\",\r\n                            text: \"Не удалось удалить транзакцию\",\r\n                        })\r\n                    );\r\n                });\r\n        };\r\n    },\r\n    fetchGlobalTransactions() {\r\n        return async (dispatch, getState, { api }) => {\r\n            const { nowDateStamp, prevDateStamp } = getState().calendar;\r\n            fetch\r\n                .get(api.transactions.global, {\r\n                    params: {\r\n                        start_date: prevDateStamp,\r\n                        end_date: nowDateStamp,\r\n                    },\r\n                })\r\n                .then(({ data }) => {\r\n                    dispatch(this.setGlobalTransactions(data.result));\r\n                });\r\n        };\r\n    },\r\n    setTransactions(items: TTransactionItem[]) {\r\n        return {\r\n            type: Types.SET_ITEMS,\r\n            payload: items,\r\n        };\r\n    },\r\n    setGlobalTransactions(items: TGlobalTransactionItem[]) {\r\n        return {\r\n            type: Types.SET_GLOBAL_ITEMS,\r\n            payload: items,\r\n        };\r\n    },\r\n    setLoading(isLoading: boolean) {\r\n        return {\r\n            type: Types.LOADING,\r\n            payload: isLoading,\r\n        };\r\n    },\r\n};\r\n","import axios from \"axios\";\r\nimport { TCategory } from \"./categories\";\r\nimport { fetch } from \"../../utils/Network\";\r\nimport { TAction } from \"../store\";\r\nimport { WidgetFormValues } from \"../../pages/Home/hooks/useWidgets\";\r\nimport DateHelper from \"../../utils/DateHelper\";\r\nimport { batch } from \"react-redux\";\r\nimport { NotificationsActions } from \"./notifications\";\r\n\r\nexport const Types = {\r\n    SET_ITEMS: \"WIDGETS@SET:ITEMS\",\r\n    SET_COLORS: \"WIDGETS@SET:COLORS\",\r\n    LOADED: \"WIDGETS@LOADED:START\",\r\n    ERROR: \"WIDGETS@LOADING:ERROR\",\r\n};\r\n\r\nexport type TWidgetColor = {\r\n    id: number;\r\n    value: string;\r\n};\r\n\r\nexport type TWidgetItem = {\r\n    id: number;\r\n    category: TCategory;\r\n    limit: number;\r\n    is_more: boolean;\r\n    color: string;\r\n    transactions_sum: number;\r\n    created_at: Date;\r\n    expire_at: Date;\r\n    period: \"День\" | \"Неделя\" | \"Месяц\" | \"Год\";\r\n};\r\n\r\ntype TWidgetAction = {\r\n    type: typeof Types.SET_ITEMS;\r\n    payload: TWidgetItem[];\r\n};\r\n\r\ntype TColorAction = {\r\n    type: typeof Types.SET_COLORS;\r\n    payload: TWidgetColor[];\r\n};\r\n\r\ntype TLoadedAction = {\r\n    type: typeof Types.LOADED;\r\n    payload: boolean;\r\n};\r\n\r\ntype WidgetsActionsType = {\r\n    fetchWidgets: () => TAction<Promise<void>>;\r\n    fetchWidgetColors: () => TAction<Promise<void>>;\r\n    addWidgetAction: (data: WidgetFormValues) => TAction<Promise<void>>;\r\n    deleteWidgetAction: (id: number) => TAction<Promise<void>>;\r\n    setWidgets: (items: TWidgetItem[]) => TWidgetAction;\r\n    setWidgetColor: (items: TWidgetColor[]) => TColorAction;\r\n    setLoaded: (isLoaded: boolean) => TLoadedAction;\r\n};\r\n\r\nexport const WidgetsActions: WidgetsActionsType = {\r\n    fetchWidgets() {\r\n        return async (dispatch, getState, { api }) => {\r\n            const { nowDateStamp } = getState().calendar;\r\n            fetch\r\n                .get(api.widget.url, {\r\n                    params: {\r\n                        date: nowDateStamp,\r\n                    },\r\n                })\r\n                .then(({ data }) => dispatch(this.setWidgets(data.result))).catch((error) => {\r\n                    console.log('tyt')\r\n                    batch(() => {\r\n                        dispatch(this.setLoaded(true));\r\n                        dispatch(\r\n                            NotificationsActions.addNotify({\r\n                                type: \"error\",\r\n                                text: \"Не удалось загрузить виджеты\",\r\n                            })\r\n                        );\r\n                    });\r\n                });\r\n        };\r\n    },\r\n    fetchWidgetColors() {\r\n        return async (dispatch, _, { api }) => {\r\n            const url = `${api.widget.url}${api.widget.colors}`;\r\n            axios\r\n                .get(url)\r\n                .then(({ data }) => dispatch(this.setWidgetColor(data.result)));\r\n        };\r\n    },\r\n    addWidgetAction(data) {\r\n        return async (dispatch, _, { api }) => {\r\n            const fields = {\r\n                category_id: data.category.id,\r\n                limit: data.limit,\r\n                period: data.period.value,\r\n                color_id: data.color.id,\r\n                expire_at: DateHelper.getNextDate(\r\n                    new Date(),\r\n                    data.period.value\r\n                ),\r\n                is_more: data.isMore,\r\n            };\r\n\r\n            fetch\r\n                .post(api.widget.url, fields)\r\n                .then(() => dispatch(this.fetchWidgets()));\r\n        };\r\n    },\r\n    deleteWidgetAction(id) {\r\n        return async (dispatch, getState, { api }) => {\r\n            const { widgets } = getState();\r\n            fetch.delete(`${api.widget.url}${id}/`).then(() => {\r\n                dispatch(\r\n                    this.setWidgets(\r\n                        widgets.items.filter(\r\n                            (item: TWidgetItem) => item.id !== id\r\n                        )\r\n                    )\r\n                );\r\n            });\r\n        };\r\n    },\r\n    setWidgets(items) {\r\n        return {\r\n            type: Types.SET_ITEMS,\r\n            payload: items,\r\n        };\r\n    },\r\n    setWidgetColor(items) {\r\n        return {\r\n            type: Types.SET_COLORS,\r\n            payload: items,\r\n        };\r\n    },\r\n    setLoaded(isLoaded) {\r\n        return {\r\n            type: Types.LOADED,\r\n            payload: isLoaded,\r\n        };\r\n    },\r\n};\r\n","export const Types = {\r\n    SET_DAY: \"CALENDAR@SET:DAY\",\r\n    SET_MONTH: \"CALENDAR@SET:MONTH\",\r\n    SET_YEAR: \"CALENDAR@SET:YEAR\",\r\n    SET_SELECTED_OPTION: \"CALENDAR@SET:SELECTED_OPTION\",\r\n};\r\n\r\nexport const setCalendarDayAction = (day: number) => ({\r\n    type: Types.SET_DAY,\r\n    payload: day,\r\n});\r\n\r\nexport const setCalendarMonthAction = (day: number) => ({\r\n    type: Types.SET_MONTH,\r\n    payload: day,\r\n});\r\n\r\nexport const setCalendarYearAction = (day: number) => ({\r\n    type: Types.SET_YEAR,\r\n    payload: day,\r\n});\r\n\r\nexport const setSelectedOptionAction = (option: string) => ({\r\n    type: Types.SET_SELECTED_OPTION,\r\n    payload: option,\r\n});\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"style_modal__1sNdq\",\"modal-wrapper\":\"style_modal-wrapper__22jWJ\",\"modal_close\":\"style_modal_close__2GKuW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"style_btn__1YbeP\",\"btn_plus\":\"style_btn_plus__3OdyH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"indicator\":\"style_indicator__1ArUc\",\"indicator-container\":\"style_indicator-container__3PB17\",\"slidein\":\"style_slidein__1UBPD\"};","import ButtonText from './ButtonText';\r\n\r\nexport default ButtonText;","import React from \"react\";\r\n\r\nimport styles from \"./style.module.scss\";\r\n\r\nexport type Props = {\r\n    onClick: () => void;\r\n};\r\n\r\nconst ButtonText: React.FC<Props> = ({ children, onClick }) => {\r\n    return (\r\n        <button className={styles.btn} onClick={onClick}>\r\n            <span className={styles.btn_plus}>+</span>\r\n            {children}\r\n        </button>\r\n    );\r\n};\r\n\r\nexport default ButtonText;\r\n","import React from \"react\";\r\nimport cn from \"classnames\";\r\n\r\nimport styles from \"./style.module.scss\";\r\n\r\ntype SelectProps = {\r\n    options: string[];\r\n    onChange?: (data: any) => void;\r\n};\r\n\r\ninterface OptionProps extends SelectProps {\r\n    onClick: (item: string) => void;\r\n    onClose: () => void;\r\n}\r\n\r\nconst SelectOptionBlock: React.FC<OptionProps> = ({\r\n    options,\r\n    onClick,\r\n    onClose,\r\n}) => {\r\n    const optionsRef = React.useRef(null);\r\n\r\n    const onCloseHandler = React.useCallback(() => {\r\n        onClose();\r\n    }, [onClose]);\r\n\r\n    React.useEffect(() => {\r\n        document.body.addEventListener(\"click\", onCloseHandler);\r\n\r\n        return () => document.body.removeEventListener(\"click\", onCloseHandler);\r\n    }, [onCloseHandler]);\r\n\r\n    return (\r\n        <div className={styles.select_options} ref={optionsRef}>\r\n            {options.map((item) => (\r\n                <div\r\n                    key={item}\r\n                    onClick={() => onClick(item)}\r\n                    className={styles.select_option}\r\n                >\r\n                    {item}\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst Select: React.FC<SelectProps> = ({ options, onChange }) => {\r\n    const [selectedOption, setSelectedOption] = React.useState(options[2]);\r\n    const [openOptions, setOpenOptions] = React.useState(false);\r\n\r\n    const openHandler = () => {\r\n        setOpenOptions((prev) => !prev);\r\n    };\r\n\r\n    const optionClickHander = (item: string) => {\r\n        setSelectedOption(item);\r\n        onChange && onChange(item)\r\n    };\r\n\r\n    const onCloseHandler = () => {\r\n        setOpenOptions(false);\r\n    };\r\n    return (\r\n        <div className={styles.select}>\r\n            <div className={styles.select_label} onClick={openHandler}>\r\n                <span>{selectedOption}</span>\r\n                <span\r\n                    className={cn(styles.select_svg, {\r\n                        [styles.open]: openOptions,\r\n                    })}\r\n                >\r\n                    <svg\r\n                        width=\"14\"\r\n                        height=\"8\"\r\n                        viewBox=\"0 0 14 8\"\r\n                        fill=\"none\"\r\n                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                    >\r\n                        <path\r\n                            d=\"M13.7 1.7L7.7 7.7C7.5 7.9 7.3 8 7 8C6.7 8 6.5 7.9 6.3 7.7L0.3 1.7C-0.1 1.3 -0.1 0.7 0.3 0.3C0.7 -0.1 1.3 -0.1 1.7 0.3L7 5.6L12.3 0.3C12.7 -0.1 13.3 -0.1 13.7 0.3C14.1 0.7 14.1 1.3 13.7 1.7Z\"\r\n                            fill=\"#5D5FEF\"\r\n                        />\r\n                    </svg>\r\n                </span>\r\n            </div>\r\n            {openOptions && (\r\n                <SelectOptionBlock\r\n                    options={options}\r\n                    onClick={optionClickHander}\r\n                    onClose={onCloseHandler}\r\n                />\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Select;\r\n","import Select from './Select';\r\n\r\nexport default Select;","import Button from './Button';\r\n\r\nexport default Button;","import React from \"react\";\r\nimport cn from \"classnames\";\r\n\r\nimport styles from \"./style.module.scss\";\r\n\r\ntype Props = {\r\n    className?: StyleSheet;\r\n};\r\n\r\nconst Button: React.FC<Props> = ({ children, className }) => {\r\n    return <button className={cn(styles.button, className)}>{children}</button>;\r\n};\r\n\r\nexport default Button;\r\n","import ModalContainer from './ModalContainer';\r\n\r\nexport default ModalContainer;","import React from \"react\";\r\n\r\nimport styles from \"./style.module.scss\";\r\n\r\ntype ModalProps = {\r\n    onClose: () => void;\r\n};\r\n\r\nconst ModalContainer: React.FC<ModalProps> = ({ children, onClose }) => {\r\n    const closeHandle = () => {\r\n        onClose();\r\n    };\r\n\r\n    const onCloseHandler = React.useCallback(\r\n        (e) => {\r\n            if (\r\n                typeof e.target.className === \"string\" &&\r\n                e.target.className.includes(\"modal-wrapper\")\r\n            ) {\r\n                onClose();\r\n            }\r\n        },\r\n        [onClose]\r\n    );\r\n\r\n    const escHandler = React.useCallback(\r\n        (e: KeyboardEvent) => {\r\n            if (e.key === \"Escape\") {\r\n                onClose();\r\n            }\r\n        },\r\n        [onClose]\r\n    );\r\n\r\n    React.useEffect(() => {\r\n        document.addEventListener(\"keydown\", escHandler);\r\n\r\n        return () => document.removeEventListener(\"keydown\", escHandler);\r\n    }, [escHandler]);\r\n    return (\r\n        <div className={styles[\"modal-wrapper\"]} onClick={onCloseHandler}>\r\n            <div className={styles.modal}>\r\n                <button className={styles.modal_close} onClick={closeHandle}>\r\n                    &times;\r\n                </button>\r\n                {children}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ModalContainer;\r\n","import Notify from \"./Notify\";\r\n\r\nexport default Notify;","import React from \"react\";\r\n\r\nimport styles from \"./style.module.scss\";\r\nimport cn from \"classnames\";\r\nimport { NotifyType } from \"../../../redux/actions/notifications\";\r\n\r\ntype Props = NotifyType & {\r\n    onClose: () => void;\r\n};\r\n\r\nconst Notify: React.FC<Props> = ({ type, text, onClose }) => {\r\n    return (\r\n        <div\r\n            className={cn(styles.notify, {\r\n                [styles.notify__success]: type === \"success\",\r\n                [styles.notify__warning]: type === \"warning\",\r\n                [styles.notify__error]: type === \"error\",\r\n            })}\r\n        >\r\n            <span className={styles.notify_close} onClick={onClose}>\r\n                &times;\r\n            </span>\r\n            <p className={styles.notify_text}>{text}</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Notify;\r\n","import { useDispatch } from \"react-redux\";\r\nimport { useTypedSelector } from \"../../../hooks/useTypedSelectors\";\r\nimport {\r\n    NotificationsActions,\r\n    NotifyType,\r\n} from \"../../../redux/actions/notifications\";\r\n\r\nconst useNotify = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    const notificationItems = useTypedSelector(\r\n        ({ notifications }) => notifications.items\r\n    );\r\n\r\n    const addNotify = (item: NotifyType) => {\r\n        dispatch(NotificationsActions.addNotify(item));\r\n    };\r\n\r\n    const deleteNotify = (id: number) => {\r\n        dispatch(NotificationsActions.deleteNotify(id));\r\n    };\r\n\r\n    return {\r\n        notificationItems,\r\n        deleteNotify,\r\n        addNotify,\r\n    };\r\n};\r\n\r\nexport default useNotify;\r\n","import NotifyContainer from './NotifyContainer';\r\n\r\nexport default NotifyContainer;","import React from \"react\";\r\nimport { Notify } from \"../../notify/components\";\r\nimport useNotify from \"./hooks/useNotify\";\r\nimport { map } from \"lodash\";\r\n\r\nimport styles from \"./style.module.scss\";\r\n\r\nconst NotifyContainer: React.FC = () => {\r\n    const { notificationItems, deleteNotify } = useNotify();\r\n    const onClose = (id: number) => {\r\n        deleteNotify(id);\r\n    };\r\n\r\n    return (\r\n        <div className={styles[\"notify-container\"]}>\r\n            {map(notificationItems, (item, index: number) => (\r\n                <Notify\r\n                    key={`${item.text}_${index}`}\r\n                    type={item.type}\r\n                    text={item.text}\r\n                    onClose={() => onClose(index)}\r\n                />\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NotifyContainer;\r\n","import ActivityIndicator from './ActivityIndicator';\r\n\r\nexport default ActivityIndicator;","import React from \"react\";\r\nimport styles from \"./style.module.scss\";\r\n\r\nconst ActivityIndicator: React.FC = () => {\r\n    return (\r\n        <div className={styles['indicator-container']}>\r\n            <span className={styles.indicator}></span>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ActivityIndicator;\r\n","import { TypedUseSelectorHook, useSelector } from \"react-redux\";\r\nimport { AppStateType } from \"../redux/reducers\";\r\n\r\nexport const useTypedSelector: TypedUseSelectorHook<AppStateType> = useSelector;\r\n","import axios from \"axios\";\r\n\r\nimport api from \"../../api\";\r\nimport { AuthFormValues } from \"../../pages/Home/hooks/useUser\";\r\nimport { fetch } from \"../../utils/Network\";\r\nimport { TAction } from \"../store\";\r\n\r\nexport const Types = {\r\n    SET_USERNAME: \"USER@SET:USERNAME\",\r\n};\r\n\r\ntype TUsernameAction = {\r\n    type: typeof Types.SET_USERNAME;\r\n};\r\n\r\ntype TransactionsActionsType = {\r\n    authAction: (data: AuthFormValues) => Promise<any>;\r\n    regAction: (data: AuthFormValues) => Promise<any>;\r\n    fetchInfoAction: () => TAction<Promise<void>>;\r\n    setUsername: (username: string) => TUsernameAction;\r\n};\r\n\r\nexport const userActions: TransactionsActionsType = {\r\n    authAction(data) {\r\n        return axios.post(`${api.user.url}${api.user.auth}`, data);\r\n    },\r\n    regAction(data) {\r\n        return axios.post(`${api.user.url}${api.user.reg}`, data);\r\n    },\r\n    fetchInfoAction() {\r\n        return async (dispatch) => {\r\n            fetch.get(`${api.user.url}${api.user.getInfo}`).then(({ data }) => {\r\n                dispatch(this.setUsername(data.username));\r\n            });\r\n        };\r\n    },\r\n    setUsername(username) {\r\n        return {\r\n            type: Types.SET_USERNAME,\r\n            payload: username,\r\n        };\r\n    },\r\n};\r\n","import axios, { AxiosError } from \"axios\";\r\nimport { reactLocalStorage } from \"reactjs-localstorage\";\r\nimport api from \"../api\";\r\n\r\nexport const fetch = axios.create({\r\n    responseType: \"json\",\r\n    withCredentials: true,\r\n    timeout: 30000,\r\n    headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"Acess-Control-Allow-Origin\": \"*\",\r\n        Accept: \"application/json\",\r\n    },\r\n});\r\n\r\nfetch.interceptors.request.use(\r\n    (config) => {\r\n        config.headers = {\r\n            ...config.headers,\r\n            Authorization: `Bearer ${reactLocalStorage.get(\"token\")}`,\r\n        };\r\n        return config;\r\n    },\r\n    (error) => {\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\nfetch.interceptors.response.use(\r\n    (config) => {\r\n        return config;\r\n    },\r\n    async (error: AxiosError) => {\r\n        const originalRequest = error.config;\r\n        if (error.response?.status === 401 && originalRequest.headers) {\r\n            await axios\r\n                .post(\r\n                    `${api.user.url}${api.user.refresh_token}`,\r\n                    {},\r\n                    {\r\n                        headers: {\r\n                            Authorization: `Bearer ${reactLocalStorage.get(\r\n                                \"refresh_token\"\r\n                            )}`,\r\n                        },\r\n                    }\r\n                )\r\n                .then(({ data }) => {\r\n                    reactLocalStorage.set(\"token\", data.access_token);\r\n                });\r\n            return fetch.request(originalRequest);\r\n        }\r\n    }\r\n);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"style_button__36BKB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"notify-container\":\"style_notify-container__13tfQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"style_container__BsDYz\"};","import { TAction } from \"../store\";\r\n\r\nexport const Types = {\r\n    SET_ITEMS: \"NOTIFY@SET:ITEM\",\r\n};\r\n\r\nexport type NotifyType = {\r\n    type: \"success\" | \"warning\" | \"error\";\r\n    text: string;\r\n};\r\n\r\ntype TNotifyAction = {\r\n    type: typeof Types.SET_ITEMS;\r\n    payload: NotifyType[];\r\n};\r\n\r\ntype NotifyActionsType = {\r\n    addNotify: (item: NotifyType) => TAction<Promise<void>>;\r\n    deleteNotify: (id: number) => TAction<Promise<void>>;\r\n    setNotifyAction: (items: NotifyType[]) => TNotifyAction;\r\n};\r\n\r\nexport const NotificationsActions: NotifyActionsType = {\r\n    addNotify(item) {\r\n        return async (dispatch, getState) => {\r\n            const { notifications } = getState();\r\n            dispatch(this.setNotifyAction([...notifications.items, item]));\r\n        };\r\n    },\r\n    deleteNotify(id) {\r\n        return async (dispatch, getState) => {\r\n            const { notifications } = getState();\r\n            const items = [...notifications.items];\r\n            items.splice(id, 1);\r\n            dispatch(this.setNotifyAction(items));\r\n        };\r\n    },\r\n    setNotifyAction(items) {\r\n        return {\r\n            type: Types.SET_ITEMS,\r\n            payload: items,\r\n        };\r\n    },\r\n};\r\n","import produce from \"immer\";\r\nimport { NotifyType } from \"../actions/notifications\";\r\nimport {\r\n    TGlobalTransactionItem,\r\n    // TransactionActions,\r\n    TTransactionItem,\r\n    Types,\r\n} from \"../actions/transactions\";\r\n\r\nexport declare type TransactionsState = {\r\n    items: TTransactionItem[];\r\n    globalItems: TGlobalTransactionItem[];\r\n    isLoaded: boolean;\r\n    error: NotifyType[];\r\n};\r\n\r\nconst initState: TransactionsState = {\r\n    items: [],\r\n    globalItems: [],\r\n    isLoaded: false,\r\n    error: [],\r\n};\r\n\r\n// const reducer = (state = initState, action: TransactionActions) => {\r\nconst reducer = (state = initState, action: any) => {\r\n    return produce(state, (draft) => {\r\n        switch (action.type) {\r\n            case Types.SET_ITEMS:\r\n                draft.items = action.payload;\r\n                draft.isLoaded = true;\r\n                break;\r\n            case Types.SET_GLOBAL_ITEMS:\r\n                draft.globalItems = action.payload;\r\n                break;\r\n            case Types.LOADING:\r\n                draft.isLoaded = action.payload;\r\n                break;\r\n            case Types.ERROR:\r\n                draft.isLoaded = false;\r\n                draft.error = action.payload;\r\n                break;\r\n            default:\r\n        }\r\n    });\r\n};\r\n\r\nexport default reducer;\r\n","import produce from \"immer\";\r\nimport { NotifyType } from \"../actions/notifications\";\r\nimport { TWidgetColor, TWidgetItem, Types } from \"../actions/widgets\";\r\n\r\nexport declare type WidgetState = {\r\n    items: TWidgetItem[];\r\n    colors: TWidgetColor[];\r\n    isLoaded: boolean;\r\n    error: NotifyType[];\r\n};\r\n\r\nconst initState: WidgetState = {\r\n    items: [],\r\n    colors: [],\r\n    isLoaded: false,\r\n    error: [],\r\n};\r\n\r\nconst reducer = (state = initState, action: any) => {\r\n    return produce(state, (draft) => {\r\n        switch (action.type) {\r\n            case Types.SET_ITEMS:\r\n                draft.items = action.payload;\r\n                draft.isLoaded = true;\r\n                break;\r\n            case Types.SET_COLORS:\r\n                draft.colors = action.payload;\r\n                break;\r\n            case Types.LOADED:\r\n                draft.isLoaded = action.payload;\r\n                break;\r\n            case Types.ERROR:\r\n                draft.isLoaded = false;\r\n                draft.error = action.payload;\r\n                break;\r\n            default:\r\n        }\r\n    });\r\n};\r\n\r\nexport default reducer;\r\n","import produce from \"immer\";\r\nimport {\r\n    // CategoryActions,\r\n    ITransactionsByCategory,\r\n    TCategory,\r\n    Types,\r\n} from \"../actions/categories\";\r\nimport { NotifyType } from \"../actions/notifications\";\r\n\r\nexport declare type CategoryState = {\r\n    items: TCategory[];\r\n    itemsTransactions: ITransactionsByCategory[];\r\n    isLoaded: boolean;\r\n    error: NotifyType[];\r\n};\r\n\r\nconst initState: CategoryState = {\r\n    items: [],\r\n    itemsTransactions: [],\r\n    isLoaded: false,\r\n    error: [],\r\n};\r\n\r\n// const reducer = (state = initState, action: CategoryActions) => {\r\nconst reducer = (state = initState, action: any) => {\r\n    return produce(state, (draft) => {\r\n        switch (action.type) {\r\n            case Types.SET_ITEMS:\r\n                draft.items = action.payload;\r\n                draft.isLoaded = true;\r\n                break;\r\n            case Types.SET_ITEMS_TRANSACTIONS:\r\n                draft.itemsTransactions = action.payload;\r\n                draft.isLoaded = true;\r\n                break;\r\n            case Types.LOADING:\r\n                draft.isLoaded = action.payload;\r\n                break;\r\n            case Types.ERROR:\r\n                draft.isLoaded = true;\r\n                draft.error = action.payload;\r\n                break;\r\n            default:\r\n        }\r\n    });\r\n};\r\n\r\nexport default reducer;\r\n","import produce from \"immer\";\r\nimport { NotifyType, Types } from \"../actions/notifications\";\r\n\r\nexport declare type NotifyState = {\r\n    items: NotifyType[];\r\n};\r\n\r\nconst initState: NotifyState = {\r\n    items: [],\r\n};\r\n\r\nconst reducer = (state = initState, action: any) => {\r\n    return produce(state, (draft) => {\r\n        switch (action.type) {\r\n            case Types.SET_ITEMS:\r\n                draft.items = action.payload;\r\n                break;\r\n            default:\r\n        }\r\n    });\r\n};\r\n\r\nexport default reducer;\r\n","import produce from \"immer\";\r\nimport DateHelper from \"../../utils/DateHelper\";\r\nimport { Types } from \"../actions/calendar\";\r\n\r\nconst nowDate = new Date();\r\n\r\nconst getDateWithoutTime = (date: Date) => {\r\n    return new Date(date.getFullYear(), date.getMonth(), date.getDate());\r\n};\r\n\r\nconst initState = {\r\n    selectedDay: nowDate.getDate(),\r\n    selectedMonth: nowDate.getMonth(),\r\n    selectedYear: nowDate.getFullYear(),\r\n    options: DateHelper.periodTypes,\r\n    selectedOption: DateHelper.periodTypes[2],\r\n    nowDateStamp: +getDateWithoutTime(nowDate),\r\n    prevDateStamp: DateHelper.getPrevDate(\r\n        getDateWithoutTime(nowDate),\r\n        DateHelper.periodTypes[2]\r\n    ),\r\n};\r\n\r\nconst reducer = (state = initState, action: any) => {\r\n    let date: Date;\r\n    return produce(state, (draft) => {\r\n        switch (action.type) {\r\n            case Types.SET_DAY:\r\n                draft.selectedDay = action.payload;\r\n                date = getDateWithoutTime(\r\n                    new Date(\r\n                        draft.selectedYear,\r\n                        draft.selectedMonth,\r\n                        action.payload\r\n                    )\r\n                );\r\n                draft.nowDateStamp = +date;\r\n                draft.prevDateStamp = DateHelper.getPrevDate(\r\n                    date,\r\n                    draft.selectedOption\r\n                );\r\n                break;\r\n            case Types.SET_MONTH:\r\n                draft.selectedMonth = action.payload;\r\n                date = getDateWithoutTime(\r\n                    new Date(\r\n                        draft.selectedYear,\r\n                        action.payload,\r\n                        draft.selectedDay\r\n                    )\r\n                );\r\n                draft.nowDateStamp = +date;\r\n                draft.prevDateStamp = DateHelper.getPrevDate(\r\n                    date,\r\n                    draft.selectedOption\r\n                );\r\n                break;\r\n            case Types.SET_YEAR:\r\n                draft.selectedYear = action.payload;\r\n                date = getDateWithoutTime(\r\n                    new Date(\r\n                        action.payload,\r\n                        draft.selectedMonth,\r\n                        draft.selectedDay\r\n                    )\r\n                );\r\n                draft.nowDateStamp = +date;\r\n                draft.prevDateStamp = DateHelper.getPrevDate(\r\n                    date,\r\n                    draft.selectedOption\r\n                );\r\n                break;\r\n            case Types.SET_SELECTED_OPTION:\r\n                draft.selectedOption = action.payload;\r\n                date = getDateWithoutTime(\r\n                    new Date(\r\n                        draft.selectedYear,\r\n                        draft.selectedMonth,\r\n                        draft.selectedDay\r\n                    )\r\n                );\r\n                draft.nowDateStamp = +date;\r\n                draft.prevDateStamp = DateHelper.getPrevDate(\r\n                    date,\r\n                    action.payload\r\n                );\r\n                break;\r\n            default:\r\n        }\r\n    });\r\n};\r\n\r\nexport default reducer;\r\n","import produce from \"immer\";\r\nimport { Types } from \"../actions/user\";\r\n\r\nconst initState = {\r\n    username: null,\r\n};\r\n\r\nconst reducer = (state = initState, action: any) => {\r\n    return produce(state, (draft) => {\r\n        switch (action.type) {\r\n            case Types.SET_USERNAME:\r\n                draft.username = action.payload;\r\n                break;\r\n            default:\r\n        }\r\n    });\r\n};\r\n\r\nexport default reducer;\r\n","import { combineReducers } from \"redux\";\r\n\r\nimport transactions from \"./transactions\";\r\nimport widgets from \"./widgets\";\r\nimport categories from \"./categories\";\r\nimport notifications from \"./notifications\";\r\nimport calendar from \"./calendar\";\r\nimport user from \"./user\";\r\n\r\nconst rootReducer = combineReducers({\r\n    transactions,\r\n    widgets,\r\n    categories,\r\n    notifications,\r\n    user,\r\n    calendar,\r\n});\r\n\r\nexport default rootReducer;\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n","import { createStore, compose, applyMiddleware } from \"redux\";\r\nimport think, { ThunkAction } from \"redux-thunk\";\r\nimport api from \"../api\";\r\n\r\nimport rootReducer, { AppStateType } from \"./reducers\";\r\n\r\ndeclare global {\r\n    interface Window {\r\n        __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\r\n    }\r\n}\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nexport type ThunkExtra = {\r\n    api: any;\r\n};\r\n\r\nexport declare type TAction<Dispatch> = ThunkAction<\r\n    Dispatch,\r\n    AppStateType,\r\n    ThunkExtra,\r\n    any\r\n>;\r\n\r\nexport const middleware = [\r\n    think.withExtraArgument<ThunkExtra>({\r\n        api,\r\n    }),\r\n];\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    composeEnhancers(applyMiddleware(...middleware))\r\n);\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport { Route, Switch } from \"react-router\";\nimport { NotifyContainer } from \"./components\";\nimport styles from \"./style.module.scss\";\n\nconst Home = React.lazy(() => import(\"./pages/Home/Home\"));\nconst Auth = React.lazy(() => import(\"./pages/Auth/Auth\"));\n\n// TODO:\n// автозаполнение в edit\n// валидацию сделать только при уходе с поля\n\nconst App = () => {\n    return (\n        <div className={styles.container}>\n            <NotifyContainer />\n            <Switch>\n                <Route path=\"/auth\">\n                    <React.Suspense fallback={<div>Loading...</div>}>\n                        <Auth isReg={false} />\n                    </React.Suspense>\n                </Route>\n                <Route path=\"/reg\">\n                    <React.Suspense fallback={<div>Loading...</div>}>\n                        <Auth isReg={true} />\n                    </React.Suspense>\n                </Route>\n                <Route path=\"/\" exact>\n                    <React.Suspense fallback={<div>Loading...</div>}>\n                        <Home />\n                    </React.Suspense>\n                </Route>\n            </Switch>\n        </div>\n    );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nimport store from \"./redux/store\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <Router>\n            <App />\n        </Router>\n    </Provider>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}